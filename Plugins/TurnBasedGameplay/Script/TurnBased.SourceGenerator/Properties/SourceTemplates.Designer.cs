//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TurnBased.SourceGenerator.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SourceTemplates {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SourceTemplates() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TurnBased.SourceGenerator.Properties.SourceTemplates", typeof(SourceTemplates).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #nullable enable
        ///
        ///using UnrealSharp;
        ///using UnrealSharp.Attributes;
        ///using UnrealSharp.UnrealSharpCore;
        ///using System;
        ///
        ///namespace {{Namespace}};
        ///
        ///public delegate void {{ClassName}}{{MethodName}}ActionDelegate({{#HasReturnType}}{{ReturnType}} Result, {{/HasReturnType}}string? Exception);
        ///
        ///public class U{{ClassName}}{{MethodName}}ActionDelegate : MulticastDelegate&lt;U{{ClassName}}{{MethodName}}Delegate&gt;
        ///{
        ///    protected void Invoker({{#HasReturnType}}{{ReturnType}} Result, {{/HasReturnType}}string? Exc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AsyncMethodCallTemplate {
            get {
                return ResourceManager.GetString("AsyncMethodCallTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using UnrealSharp;
        ///using UnrealSharp.Attributes;
        ///using UnrealSharp.Attributes.MetaTags;
        ///using UnrealSharp.Engine;
        ///using UnrealSharp.TurnBasedCore;
        ///using TurnBased.Core;
        ///using LanguageExt.UnsafeValueAccess;
        ///
        ///namespace {{Namespace}};
        ///
        ///public static partial class {{EngineName}}Extensions 
        ///{
        ///    extension({{ClassName}} unit)
        ///    {
        ///        {{#Components}}
        ///        {{#Properties}}
        ///        public {{Type}} {{Name}} 
        ///        {
        ///            {{#HasGetter}}
        ///            get =&gt; unit.{{../ComponentName}}. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TurnBasedUnitExtensionsTemplate {
            get {
                return ResourceManager.GetString("TurnBasedUnitExtensionsTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using UnrealSharp;
        ///using UnrealSharp.Attributes;
        ///using UnrealSharp.Engine;
        ///using UnrealSharp.TurnBasedCore;
        ///
        ///namespace {{Namespace}};
        ///
        ///partial class {{ClassName}} : {{#Components}}ITurnBasedUnit&lt;{{ComponentType}}&gt;{{^IsLast}}, {{/IsLast}}{{/Components}}
        ///{
        ///    {{#Components}}
        ///    {{ComponentType}} ITurnBasedUnit&lt;{{ComponentType}}&gt;.Component =&gt; {{ComponentName}};
        ///    {{/Components}}
        ///}.
        /// </summary>
        internal static string TurnBasedUnitTemplate {
            get {
                return ResourceManager.GetString("TurnBasedUnitTemplate", resourceCulture);
            }
        }
    }
}
