#nullable enable
using System.Diagnostics.CodeAnalysis;
using UnrealSharp;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Attributes.MetaTags;
using UnrealSharp.CoreUObject;
using UnrealSharp.DeveloperSettings;
using UnrealSharp.StaticVars;
using GameDataAccessTools.Core.DataRetrieval;
#if !PACKAGE
using UnrealSharp.LevelEditor;
#endif

namespace {{Namespace}};

[UClass(ClassFlags.DefaultConfig, {{#HasDisplayName}}DisplayName = "{{DisplayName}}", {{/HasDisplayName}}ConfigCategory = "Game")]
public partial class U{{ClassName}}Settings : UDeveloperSettings 
{

    {{#Repositories}}
    [UProperty(PropertyFlags.EditDefaultsOnly | PropertyFlags.BlueprintReadOnly | PropertyFlags.Config{{#HasCategory}}, Category = "{{Category}}"{{/HasCategory}})]
    [AllowedClasses("UnrealSharp.{{RepositoryClassName}}_C")]
    public FSoftObjectPath {{Name}} { get; }
    {{/Repositories}}

}

public sealed partial class {{ClassName}} 
{
    private static readonly FGameStaticVar<{{ClassName}}> StaticInstance = new();

    private static {{ClassName}} Instance => StaticInstance.Value ?? (StaticInstance.Value = new {{ClassName}}());

    {{#Repositories}}
    private readonly TStrongObjectPtr<{{Type}}> _{{Name}};
    public static partial {{Type}} {{Name}} => Instance._{{Name}}.Value ?? throw new InvalidOperationException("{{Name}} not initialized");
    {{/Repositories}}

    private {{ClassName}}() 
    {
        var settings = UObject.GetDefault<U{{ClassName}}Settings>();
        {{#Repositories}}
        _{{Name}} = ((TSoftObjectPtr<UObject>)settings.{{Name}}).LoadSynchronous() as {{Type}};
        {{/Repositories}}
    }

}


{{#Repositories}}
[UStruct]
public readonly partial record struct F{{SingularName}}Handle(
    [field: UProperty(PropertyFlags.EditAnywhere | PropertyFlags.BlueprintReadOnly)]
    FName Id) : IGameDataRepositoryHandle<{{EntryType}}>, IEquatable<FName>, IComparable<F{{SingularName}}Handle>, IComparable<FName>
{
    static IDataRepository<FName, {{EntryType}}> IDataHandle<FName, {{EntryType}}>.Repository => Repository;

    public static IGameDataRepository<{{EntryType}}> Repository 
    { 
        get 
        {
            #if !PACKAGE
            var playInEditorSubsystem = UObject.GetEditorSubsystem<ULevelEditorSubsystem>();
            if (!playInEditorSubsystem.IsInPlayInEditor())
            {
                var settings = UObject.GetDefault<U{{../ClassName}}Settings>();
                var repository = ((TSoftObjectPtr<UObject>)settings.{{Name}}).LoadSynchronous() as {{Type}};
                repository?.Refresh();
                return repository;
            }
            #endif
            
            return {{../ClassName}}.{{Name}};
        } 
    }

    public static IEnumerable<FName> EntryKeys => Repository.EntryKeys;

    [MemberNotNullWhen(true, nameof(Entry))]
    public bool IsValid => Entry is not null;

    public {{EntryType}}? Entry => Repository.TryGetEntry(Id, out var result) ? result : null;

    public static implicit operator F{{SingularName}}Handle({{EntryType}} entry) => new F{{SingularName}}Handle(entry.Id);
}
{{/Repositories}}