#nullable enable
using UnrealSharp;
using UnrealSharp.Core;
using UnrealSharp.Core.Marshallers;
using UnrealSharp.CoreUObject;
using UnrealSharp.Interop;
using ManagedGameDataAccessTools.DataRetrieval;

namespace {{Namespace}};

{{#IsReadOnly}}readonly {{/IsReadOnly}}ref partial struct {{StructName}} : INativeStructReference<{{StructName}}> {
  private readonly IntPtr _nativeStruct;

  {{#Properties}}
  private static int {{Name}}_Offset;
  {{#MarshallerInstanced}}
  private static IntPtr {{Name}}_NativeProperty;
  private static {{MarshallerInfo.Name}}? {{Name}}_Marshaller = null;
  {{/MarshallerInstanced}}
  
  public {{Type}} {{Name}} {
    get {
      {{#MarshallerInstanced}}
      {{Name}}_Marshaller ??= new {{MarshallerInfo.Name}}({{Name}}_NativeProperty, {{MarshallerInfo.ChildMarshallerType}}.ToNative, {{MarshallerInfo.ChildMarshallerType}}.FromNative{{#MarshallerHasValue}}, {{MarshallerInfo.ValueMarshallerType}}.ToNative, {{MarshallerInfo.ValueMarshallerType}}.FromNative{{/MarshallerHasValue}});
      IntPtr {{Name}}_NativeBuffer = IntPtr.Add(_nativeStruct, {{Name}}_Offset);
      return {{Name}}_Marshaller.FromNative({{Name}}_NativeBuffer, 0);
      {{/MarshallerInstanced}}
      {{^MarshallerInstanced}}
      return {{MarshallerInfo.Name}}.FromNative(IntPtr.Add(_nativeStruct, {{Name}}_Offset), 0);
      {{/MarshallerInstanced}}
    }
    {{^if ../IsReadOnly}}
    set {
      {{#MarshallerInstanced}}
      {{Name}}_Marshaller ??= new {{MarshallerInfo.Name}}({{Name}}_NativeProperty, {{MarshallerInfo.ChildMarshallerType}}.ToNative, {{MarshallerInfo.ChildMarshallerType}}.FromNative{{#MarshallerHasValue}}, {{MarshallerInfo.ValueMarshallerType}}.ToNative, {{MarshallerInfo.ValueMarshallerType}}.FromNative{{/MarshallerHasValue}});
      IntPtr {{Name}}_NativeBuffer = IntPtr.Add(_nativeStruct, {{Name}}_Offset);
      {{Name}}_Marshaller.ToNative({{Name}}_NativeBuffer, 0, value);
      {{/MarshallerInstanced}}
      {{^MarshallerInstanced}}
      {{MarshallerInfo.Name}}.ToNative(IntPtr.Add(_nativeStruct, {{Name}}_Offset), 0, value);
      {{/MarshallerInstanced}}
    }
    {{/if}}
  }
  {{/Properties}}

  private static readonly IntPtr NativeClassPtr;
  public static int NativeDataSize { get; }

  static {{StructName}}()
  {
    NativeClassPtr = UCoreUObjectExporter.CallGetNativeStructFromName(typeof({{ReferenceStructName}}).GetAssemblyName(), "{{ReferenceStructNamespace}}", "{{ReferenceStructEngineName}}");
    {{#Properties}}
    {{^MarshallerInstanced}}IntPtr {{/MarshallerInstanced}}{{Name}}_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "{{Name}}");
    {{Name}}_Offset = FPropertyExporter.CallGetPropertyOffset({{Name}}_NativeProperty);
    {{/Properties}}
    NativeDataSize = UScriptStructExporter.CallGetNativeStructSize(NativeClassPtr);
  }

  public static {{StructName}} Create(IntPtr nativeStruct) => new {{StructName}}(nativeStruct);
  public static UScriptStruct GetScriptStruct() {
    IntPtr handle = FCSManagerExporter.CallFindManagedObject(NativeClassPtr);
    return GCHandleUtilities.GetObjectFromHandlePtr<UScriptStruct>(handle)!;
  }

  public static IntPtr GetNativeStruct() { 
    return NativeClassPtr;
  }

  public {{StructName}}(IntPtr nativeStruct) {
    _nativeStruct = nativeStruct;
  }

  public static implicit operator {{ReferenceStructName}}(in {{StructName}} value) => new {{ReferenceStructName}}(value._nativeStruct);
}