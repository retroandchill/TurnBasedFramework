#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using UnrealSharp;
using UnrealSharp.Attributes;
using UnrealSharp.GameDataAccessTools;
using ManagedGameDataAccessTools.DataRetrieval;

namespace {{Namespace}};

[UClass]
public partial class {{AssetClassName}} : UGameDataAsset, IGameDataAsset<{{EntryName}}>
{
  public TSubclassOf<{{EntryName}}> EntryClass { get; } = new(typeof({{EntryName}}));

  [UProperty(PropertyFlags.EditAnywhere | PropertyFlags.Instanced)]
  private TArray<{{EntryName}}> DataEntries { get; set; }

  private ImmutableDictionary<FName, {{EntryName}}> _entries = ImmutableDictionary<FName, {{EntryName}}>.Empty;
  public IReadOnlyDictionary<FName, {{EntryName}}> Entries => _entries;

  public IReadOnlyList<{{EntryName}}> OrderedEntries => DataEntries;

  public int NumEntries => DataEntries.Count;

  public IEnumerable<FName> EntryNames => DataEntries.Select(x => x.Id);

  public sealed override int GetNumEntries() {
    return NumEntries;
  }

  public sealed override TSubclassOf<UGameDataEntry> GetEntryClass() {
    return EntryClass.As<UGameDataEntry>();
  }

  public {{EntryName}} GetEntry(FName key) {
    return _entries[key];
  }

  public sealed override {{EntryName}} GetEntry(int index) {
    return DataEntries[index];
  }

  public bool TryGetEntry(FName key, [NotNullWhen(true)] out {{EntryName}}? entry) {
    return _entries.TryGetValue(key, out entry);
  }

  public bool TryGetEntry(int index, [NotNullWhen(true)] out {{EntryName}}? entry) {
    if (index < 0 || index >= DataEntries.Count) {
      entry = null;
      return false;
    }

    entry = DataEntries[index];
    return true;
  }

  public void OnGameDataAssetLoaded() {
    _entries = DataEntries.ToImmutableDictionary(x => x.Id);
  }

#if !PACKAGE
  protected sealed override void AddEntry(UGameDataEntry newEntry) {
    DataEntries.Add(({{EntryName}}) newEntry);
  }

  protected sealed override void RemoveEntry(int index) {
    DataEntries.RemoveAt(index);
  }

  protected sealed override void SwapEntries(int index1, int index2) {
    var temp = DataEntries[index1];
    DataEntries[index1] = DataEntries[index2];
    DataEntries[index2] = temp;
  }
#endif
}
