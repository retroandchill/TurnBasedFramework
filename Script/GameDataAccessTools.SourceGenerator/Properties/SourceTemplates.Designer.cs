//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameAccessTools.SourceGenerator.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SourceTemplates {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SourceTemplates() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GameAccessTools.SourceGenerator.Properties.SourceTemplates", typeof(SourceTemplates).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Collections.Immutable;
        ///using System.Diagnostics.CodeAnalysis;
        ///using UnrealSharp;
        ///using UnrealSharp.Attributes;
        ///using UnrealSharp.UnrealSharpCore;
        ///using ManagedGameDataAccessTools.DataRetrieval;
        ///
        ///namespace {{Namespace}};
        ///
        ///[UClass]
        ///public partial class {{AssetClassName}} : UCSPrimaryDataAsset, IGameDataAsset&lt;{{EntryName}}&gt;
        ///{
        ///  [UProperty]
        ///  private TArray&lt;{{EntryName}}&gt; DataEntries { get; set; }
        ///
        ///  private ImmutableDictionary&lt;FName, {{EntryName}}&gt; _entries = ImmutableDictionary&lt;FNa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GameDataAssetTemplate {
            get {
                return ResourceManager.GetString("GameDataAssetTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #nullable enable
        ///using UnrealSharp;
        ///using UnrealSharp.Core;
        ///using UnrealSharp.Core.Marshallers;
        ///using UnrealSharp.CoreUObject;
        ///using UnrealSharp.Interop;
        ///using ManagedGameDataAccessTools.DataRetrieval;
        ///
        ///namespace {{Namespace}};
        ///
        ///{{#IsReadOnly}}readonly {{/IsReadOnly}}ref partial struct {{StructName}} : INativeStructReference&lt;{{StructName}}&gt; {
        ///  private readonly IntPtr _nativeStruct;
        ///
        ///  {{#Properties}}
        ///  private static int {{Name}}_Offset;
        ///  {{#MarshallerInstanced}}
        ///  private static IntPtr {{ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RefStructTemplate {
            get {
                return ResourceManager.GetString("RefStructTemplate", resourceCulture);
            }
        }
    }
}
